@page "/chat/{otherUserId}"
@inject IDatingAppService DatingAppService
@using DatingApp.Entities
@using DatingApp.Services



<h3>Chat</h3>

<div>
    @foreach (var message in chatMessages)
    {
        <div>
            <p>@message.MessageContent</p>
            <small>@message.Timestamp</small>
        </div>
    }
</div>

<div>
    <input type="text" @bind="newMessage" />
    <button @onclick="SendMessage">Send</button>
</div>

@code {
    private List<ChatMessage> chatMessages = new List<ChatMessage>();
    private string newMessage = "";

    [Parameter]
    public int OtherUserId { get; set; }

    private int? loggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        // Get the username of the logged-in user (replace "username" with your actual logic)
        string loggedInUsername = "username";

        // Fetch the logged-in user's ID based on the username
        loggedInUserId = await DatingAppService.GetUserIdByUsername(loggedInUsername);

        chatMessages = await DatingAppService.GetChatMessagesForUsers(loggedInUserId.Value, OtherUserId);
    }

    private async Task SendMessage()
    {
        if (!loggedInUserId.HasValue)
        {
            // Return or handle the case where the logged-in user ID is not available
            return;
        }

        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            await DatingAppService.InsertChatMessage(loggedInUserId.Value, OtherUserId, newMessage);
            chatMessages.Add(new ChatMessage
            {
                SenderId = loggedInUserId.Value,
                ReceiverId = OtherUserId,
                MessageContent = newMessage,
                Timestamp = DateTime.Now
            });
            newMessage = ""; // Clear the message input
        }
    }


}
