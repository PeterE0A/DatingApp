@page "/like-profile/{LoggedInUserId:int}"
@inject IDatingAppService DatingAppService
@inject NavigationManager Navigation
@using DatingApp.Entities

<div class="container">
    <div class="header">
        <h1 class="page-title">All Profiles</h1>
        <div class="filter">
            <label class="filter-label">
                <input type="radio" name="genderFilter" value="Male" @onchange="UpdateGenderFilter" />
                <span class="filter-text">Male</span>
            </label>
            <label class="filter-label">
                <input type="radio" name="genderFilter" value="Female" @onchange="UpdateGenderFilter" />
                <span class="filter-text">Female</span>
            </label>
        </div>
    </div>

    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>User ID</th>
                    <th>Full Name</th>
                    <th>Birthday</th>
                    <th>Gender</th>
                    <th>City</th>
                    <th>Postal Code</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var profile in filteredProfiles)
                {
                    <tr>
                        <td>@profile.UserID</td>
                        <td>@profile.FullName</td>
                        <td>@profile.Birthday</td>
                        <td>@profile.Gender</td>
                        <td>@profile.City</td>
                        <td>@profile.PostalCode</td>
                        <td>
                            <button class="like-button" @onclick="() => LikeProfileAsync(profile, LoggedInUserId)">
                                @(profile.IsLiked ? "Liked" : "Like")
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <button class="check-matches-button" @onclick="CheckMatches">Check Matches</button>
</div>

<style>
    
    body {
        font-family: 'Inter', Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f7f9fc;
    }

    
    .container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 40px;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .page-title {
        font-size: 28px;
        font-weight: bold;
        color: #333;
    }

    .filter {
        display: flex;
        gap: 15px;
    }

    .filter-label {
        display: flex;
        align-items: center;
        cursor: pointer;
    }

    .filter-text {
        font-weight: 500;
        margin-left: 5px;
    }

    .table-container {
        overflow-x: auto;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .table th,
        .table td {
            padding: 10px 15px;
            text-align: center;
            border-bottom: 1px solid #e0e0e0;
        }

    .like-button {
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s ease-in-out;
    }

        .like-button:hover {
            background-color: #0056b3;
        }

    .check-matches-button {
        background-color: #28a745;
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease-in-out;
        display: block;
        margin: 20px auto 0;
    }

        .check-matches-button:hover {
            background-color: #1e7f3e;
        }
</style>

@code {
    private List<Profile> profiles;
    private List<Profile> filteredProfiles = new List<Profile>();
    private string? selectedGender;


    [Parameter] public int LoggedInUserId { get; set; }


    protected override async Task OnInitializedAsync()
    {

        profiles = DatingAppService.GetProfiles();
        await UpdateFilteredProfiles();
    }

    private async Task UpdateFilteredProfiles()
    {
        if (!string.IsNullOrEmpty(selectedGender))
        {
            filteredProfiles = await DatingAppService.GetProfilesByGender(selectedGender);
        }
        else
        {
            filteredProfiles = profiles;
        }
    }

    private async Task UpdateGenderFilter(ChangeEventArgs e)
    {
        selectedGender = e.Value.ToString();
        await UpdateFilteredProfiles();
    }

    private async Task LikeProfileAsync(Profile profile, int likerUserId)
    {
       
        bool success = await DatingAppService.AddLikeAsync(likerUserId, profile.UserID);

        if (success)
        {
            profile.IsLiked = true; 
        }
    }

    private void CheckMatches()
    {
        Navigation.NavigateTo("/check-for-match/" + LoggedInUserId);
    }

}
