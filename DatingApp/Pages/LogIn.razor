@page "/login"
@using DatingApp.Services
@inject IDatingAppService DatingAppService
@inject NavigationManager Navigation

<h3>Login</h3>

<div>
    <label for="username">Username:</label>
    <input type="text" id="username" @bind="@Username" />
</div>
<div>
    <label for="password">Password:</label>
    <input type="password" id="password" @bind="@Password" />
</div>
<button @onclick="LogInAsync">Log In</button>

<div>
    @if (IsLoggedIn.HasValue)
    {
        if (IsLoggedIn.Value)
        {
            @if (HasProfile.HasValue && HasProfile.Value)
            {
                <p>Logged in successfully!</p>
                <p>You have a profile.</p>
                <button @onclick="GoToLikeProfileAsync">Go to Like Profile</button>
            }
            else if (HasProfile.HasValue && !HasProfile.Value)
            {

                <p>Logged in successfully, but it seems like you don't have a profile.</p>
                <p><button @onclick="CreateProfile">Click here to create a profile</button></p>
            }
        }
        else
        {
            <p>@ErrorMessage</p>
        }
    }
</div>

@code {
    public string? Username { get; set; }
    public string? Password { get; set; }
    public bool? IsLoggedIn { get; set; } 
    public string? ErrorMessage { get; set; }
    public bool? HasProfile { get; set; }

    private async Task LogInAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(Password))
            {
                bool? success = await DatingAppService.LogInAsync(Username, Password);

                if (success.HasValue && success.Value)
                {
                    IsLoggedIn = true;
                    ErrorMessage = string.Empty;
                    HasProfile = await DatingAppService.CheckForProfileAsync(Username);
                }
                else
                {
                    IsLoggedIn = false;
                    ErrorMessage = "Log in failed.";
                }
            }
            else
            {
                IsLoggedIn = false;
                ErrorMessage = "Username and password cannot be empty.";
            }
        }
        catch (Exception ex)
        {
            IsLoggedIn = false;
            ErrorMessage = ex.Message;
        }
    }
    private async Task GoToLikeProfileAsync()
    {
        if (IsLoggedIn.HasValue && IsLoggedIn.Value && HasProfile.HasValue)
        {
            if (HasProfile.Value)
            {
                int? loggedInUserId = await DatingAppService.GetUserIdByUsername(Username);
                Navigation.NavigateTo($"/like-profile/{loggedInUserId}");
            }
            else
            {
                // Navigation.NavigateTo("/create-profile");
                CreateProfile();
            }
        }
    }

    private void CreateProfile()
    {
        Navigation.NavigateTo("/create-profile");
    }
}