@page "/login"
@using DatingApp.Services
@inject IDatingAppService DatingAppService
@inject NavigationManager Navigation

<div class="container">
    <div class="card p-4 shadow">
        <h3 class="text-primary mb-4">Log In</h3>

        <div class="form-group mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" id="username" @bind="@Username" class="form-control" placeholder="Enter your username" />
        </div>

        <div class="form-group mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" id="password" @bind="@Password" class="form-control" placeholder="Enter your password" />
        </div>

        <button @onclick="LogInAsync" class="btn btn-primary btn-block mb-3">Log In</button>

        <div class="text-center">
            @if (IsLoggedIn.HasValue)
            {
                if (IsLoggedIn.Value)
                {
                    @if (HasProfile.HasValue && HasProfile.Value)
                    {
                        <p class="success-message">Logged in successfully!</p>
                        <p>You have a profile.</p>
                        <button @onclick="GoToLikeProfileAsync" class="btn btn-success btn-block">Go to Like Profile</button>
                    }
                    else if (HasProfile.HasValue && !HasProfile.Value)
                    {
                        <p class="success-message">Logged in successfully, but it seems like you don't have a profile.</p>
                        <button @onclick="CreateProfile" class="btn btn-primary btn-block">Create Profile</button>
                    }
                }
                else
                {
                    <p class="error-message">@ErrorMessage</p>
                }
            }
        </div>

        <p class="mt-3 text-center">Don't have an account? <a href="/create-account" class="text-primary">Create one</a>.</p>
    </div>
</div>

<style>
   
    body {
        font-family: 'Inter', Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f7f9fc;
    }

    .container {
        max-width: 500px;
        margin: 0 auto;
        padding: 40px;
    }

    .form-label {
        font-weight: bold;
        color: #333;
    }

    .card {
        border-radius: 15px;
    }

    .shadow {
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    .text-primary {
        color: #007bff;
        font-weight: bold;
    }

    .success-message {
        color: #28a745;
        font-size: 14px;
        margin-top: 10px;
    }

    .error-message {
        color: #dc3545;
        font-size: 14px;
        margin-top: 10px;
    }

    .btn-block {
        display: block;
        width: 100%;
    }
</style>


@code {
    public string? Username { get; set; }
    public string? Password { get; set; }
    public bool? IsLoggedIn { get; set; } 
    public string? ErrorMessage { get; set; }
    public bool? HasProfile { get; set; }

    private async Task LogInAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(Password))
            {
                bool? success = await DatingAppService.LogInAsync(Username, Password);

                if (success.HasValue && success.Value)
                {
                    IsLoggedIn = true;
                    ErrorMessage = string.Empty;
                    HasProfile = await DatingAppService.CheckForProfileAsync(Username);
                }
                else
                {
                    IsLoggedIn = false;
                    ErrorMessage = "Log in failed.";
                }
            }
            else
            {
                IsLoggedIn = false;
                ErrorMessage = "Username and password cannot be empty.";
            }
        }
        catch (Exception ex)
        {
            IsLoggedIn = false;
            ErrorMessage = ex.Message;
        }
    }

    private async Task GoToLikeProfileAsync()
    {
        if (IsLoggedIn.HasValue && IsLoggedIn.Value && HasProfile.HasValue)
        {
            if (HasProfile.Value)
            {
                int? loggedInUserId = await DatingAppService.GetUserIdByUsername(Username);
                Navigation.NavigateTo($"/like-profile/{loggedInUserId}");
            }
            else
            {
                CreateProfile();
            }
        }
    }

    private void CreateProfile()
    {
        Navigation.NavigateTo("/create-profile");
    }
}
