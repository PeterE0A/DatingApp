@page "/create-account"
@using DatingApp.Services
@inject IDatingAppService DatingAppService
@inject NavigationManager Navigation

<h3>Create Account</h3>

<div>
    <label for="username">Username:</label>
    <input type="text" id="username" @bind="@Username" />
</div>
<div>
    <label for="password">Password:</label>
    <input type="password" id="password" @bind="@Password" />
</div>
<button @onclick="CreateAccountAsync">Create Account</button>

<div>
    @if (IsAccountCreated.HasValue)
    {
        if (IsAccountCreated.Value)
        {
            <p>Account created successfully!</p>
        }
        else
        {
            <p>@ErrorMessage</p>
        }
    }
</div>

<p>Already have an account? <a href="/login">Log in here</a>.</p>

@code {
    private string? Username { get; set; }
    private string? Password { get; set; }
    private bool? IsAccountCreated { get; set; }
    private string? ErrorMessage { get; set; }

    private async Task CreateAccountAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(Password))
            {
                bool success = await DatingAppService.CreateAccountAsync(Username, Password);

                if (success)
                {
                    IsAccountCreated = true;
                    ErrorMessage = string.Empty;
                }
                else
                {
                    IsAccountCreated = false;
                    ErrorMessage = "Account creation failed.";
                }
            }
            else
            {
                IsAccountCreated = false;
                ErrorMessage = "Username and password cannot be empty.";
            }
        }
        catch (Exception ex)
        {
            IsAccountCreated = false;
            ErrorMessage = ex.Message;
        }
    }
}
